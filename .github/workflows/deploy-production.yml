name: deploy-production

concurrency:
  group: deploy-production
  cancel-in-progress: true

on:
  release:
    types: [published]

permissions:
  id-token: write # required for OIDC connecting to AWS
  contents: read

jobs:
  deploy-prod-frontend:
    if: startsWith(github.ref_name, 'r-') # the prefix we have added to the tag
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PULUMI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PULUMI }}

      - name: Clean up before Pulumi release
        run: rm -rf dist

      - name: Get Artifact from Release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          file: frontend.zip

      - name: Unzip Artifact
        run: unzip frontend.zip

      - name: Deploy frontend to S3
        run: |
          aws s3 sync ./dist "s3://${{ secrets.FRONTEND_BUCKET }}"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.FRONTEND_CF_DISTRO_ID }} --paths "/*"

  deploy-prod-backend:
    if: startsWith(github.ref_name, 'r-') # the prefix we have added to the tag
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Download ECR tag artifact
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          file: new_ecr_tag.txt
      
      - name: Download Pulumi IaC artifact
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          file: pulumi.tbz
      
      - name: Extract ECR tag from artifact
        id: pulumi-tag-extract
        run: |
          echo "pulumi_tag=$(cat new_ecr_tag.txt)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials (Pulumi)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PULUMI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PULUMI }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Set up Pulumi environment
        id: pulumi-env
        shell: bash
        run: |
          tar -xvf pulumi.tbz
          curl -fsSL https://get.pulumi.com | sh

      - name: Deploy to prod
        shell: bash
        env:
          PULUMI_ACCESS_TOKEN: "${{ secrets.PULUMI_ACCESS_TOKEN }}"
        run: |
          # Update the PATH to include the right version of Pulumi; this is non-trivial or impossible
          # to do with the GHA workflow "env" settings.
          export PATH="/home/runner/.pulumi/bin:$PATH"

          # Create a YAML config stump containing only the nested tree leading to the image tag update
          cd pulumi
          cat << EOF > newimage.yaml
          resources:
            tb:fargate:FargateClusterWithLogging:
              backend:
                task_definition:
                  container_definitions:
                    backend:
                      image: "${{ steps.pulumi-tag-extract.outputs.pulumi_tag }}"
          EOF

          # Use yq to merge the stump into the main config
          yq -i '. *= load("newimage.yaml")' config.prod.yaml
          export PULUMI_CONFIG_PASSPHRASE='${{ secrets.PULUMI_PASSPHRASE }}'

          # Set up the Pulumi environment and update the service
          pulumi login
          pulumi stack select prod
          TBPULUMI_DISABLE_PROTECTION=True \
            pulumi up -y --diff --target \
            'urn:pulumi:prod::appointment::tb:fargate:FargateClusterWithLogging$aws:ecs/taskDefinition:TaskDefinition::appointment-prod-fargate-backend-taskdef' \
            --target-dependents

  prod-sanity-browserstack:
    name: prod-sanity-browserstack
    needs: [deploy-prod-backend, deploy-prod-frontend]
    runs-on: ubuntu-latest
    environment: production
    env:
      APPT_USERNAME: ${{ secrets.E2E_APPT_PROD_USERNAME }}
      TB_ACCTS_EMAIL: ${{ secrets.E2E_APPT_PROD_TB_ACCTS_EMAIL }}
      TB_ACCTS_PWORD: ${{ secrets.E2E_APPT_PROD_TB_ACCTS_PWORD }}
      APPT_DISPLAY_NAME: ${{ secrets.E2E_APPT_PROD_DISPLAY_NAME }}
      APPT_MY_SHARE_LINK: ${{ secrets.E2E_APPT_PROD_MY_SHARE_LINK }}
      APPT_BOOKEE_EMAIL: ${{ secrets.E2E_APPT_PROD_BOOKEE_EMAIL }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'test/e2e/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./test/e2e
          npm install

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@master
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          project-name: 'Thunderbird Appointment'
          build-name: 'Production Deployment Tests: BUILD_INFO'

      - name: Run Playwright Tests on Browserstack
        run: |
          cd ./test/e2e
          cp .env.prod.example .env
          npm run prod-sanity-test-browserstack-gha
