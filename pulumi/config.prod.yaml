---
resources:

  domains:
    redis: cache.appointment.tb.pro

  tb:network:MultiCidrVpc:
    appointment:
      cidr_block: 10.20.0.0/16
      subnets:
        eu-central-1a:
          - 10.20.0.0/17
        eu-central-1b:
          - 10.20.128.0/17
      enable_internet_gateway: True
      egress_via_internet_gateway: True
      enable_dns_hostnames: True
      endpoint_interfaces:
        - ecr.api
        - ecr.dkr
        - logs
        - secretsmanager
  
  # The __main.py__ here is very specific in the following way:
  # For each ECS cluster you eventually define, you **must** have one entry by the same exact name in the
  # `load_balancers` and `containers` sections below. If the cluster does not expose a service (f/ex, uses
  # `build_load_balancer: False`), you may set the `load_balancers` entry to `null`.
  tb:network:SecurityGroupWithRules:
    load_balancers:
      backend:
        rules:
          ingress:
            - description: TLS traffic to the load balancer from the world
              cidr_blocks:
                - 0.0.0.0/0
              protocol: tcp
              from_port: 443
              to_port: 443
          egress:
            - description: Allow outbound traffic to anywhere
              protocol: tcp
              from_port: 0
              to_port: 65535
              cidr_blocks:
                - 0.0.0.0/0
        
    containers:
      backend:
        rules:
          ingress:
            - description: Allow traffic from the load balancer to the container
              # Sources are set in code
              protocol: tcp
              from_port: 5000
              to_port: 5000
          egress:
            - description: Allow traffic from the container out to the Internet
              protocol: tcp
              from_port: 0
              to_port: 65535
              cidr_blocks:
                - 0.0.0.0/0
    
    other:
      backend_cache:
        rules:
          ingress:
            - description: Primary Redis traffic
              # source_sgs set in code
              protocol: tcp
              from_port: 6379
              to_port: 6379
            - description: Replica Redis traffic
              # source_sgs set in code
              protocol: tcp
              from_port: 6380
              to_port: 6380
          egress:
            - description: Allow outbound traffic to anywhere
              protocol: tcp
              from_port: 0
              to_port: 65535
              cidr_blocks:
                - 0.0.0.0/0
  
  tb:secrets:PulumiSecretsManager:
    pulumi:
      recovery_window_in_days: 0
      secret_names:
        - database-connection
        - database-encryption
        - fxa-secrets
        - google-oauth
        - smtp-connection
        - x-allow-secret
        - zoom-secrets
        # - neon-database-connection

  tb:ec2:SshableInstance: {}
  # Fill out this template to build an SSH bastion
  # tb:ec2:SshableInstance:
  #   bastion:
  #     ssh_keypair_name: your-ec2-keypair
  #     source_cidrs:
  #       - your.ip.addr.ess/32

  aws:elasticache:ServerlessCache:
    backend:
      description: Appointment backend (prod)
      engine: redis
      major_engine_version: "7"

  tb:fargate:FargateClusterWithLogging:
    backend:
      assign_public_ip: True
      desired_count: 1
      health_check_grace_period_seconds: 30 # Time before the LB checks for health of a new backend
      internal: False
      services:
        backend:
          listener_port: 443
          listener_proto: HTTPS
          listener_cert_arn: arn:aws:acm:eu-central-1:768512802988:certificate/249fcf3e-0cf2-48ea-b6dc-17239799b3f4
          container_port: 5000
          container_name: backend
          # "name" field is arbitrary, but must be unique and no longer than 32 chars
          name: appointment-backend-prod
          health_check:
            healthy_threshold: 2
            unhealthy_threshold: 5
            interval: 30
            path: /
            port: 5000
      task_definition:
        network_mode: awsvpc
        cpu: 512
        memory: 2048
        requires_compatibilities:
          - FARGATE
        container_definitions:
          backend:
            image: 768512802988.dkr.ecr.eu-central-1.amazonaws.com/thunderbird/appointment:82af7fd87268812ac42bfd0e4e542d6f234e14ac
            portMappings:
              - name: backend
                containerPort: 5000
                hostPort: 5000
                protocol: tcp
                appProtocol: http
            linuxParameters:
              initProcessEnabled: True
            secrets:
              - name: DATABASE_SECRETS
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/database-connection-4koh7Z
              - name: DB_ENC_SECRET
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/database-encryption-uS7JBM
              - name: FXA_SECRETS
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/fxa-secrets-tbPt8s
              - name: GOOGLE_OAUTH_SECRETS
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/google-oauth-aSrasg
              - name: SMTP_SECRETS
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/smtp-connection-eW2HFf
              - name: ZOOM_SECRETS
                valueFrom: arn:aws:secretsmanager:eu-central-1:768512802988:secret:appointment/prod/zoom-secrets-btmho1
            environment:
              - name: LOG_LEVEL
                value: ERROR
              - name: FRONTEND_URL
                value: https://appointment.tb.pro
              - name: SHORT_BASE_URL
                value: https://apt.mt/
              - name: TIER_BASIC_CALENDAR_LIMIT
                value: "3"
              - name: TIER_PLUS_CALENDAR_LIMIT
                value: "5"
              - name: TIER_PRO_CALENDAR_LIMIT
                value: "10"
              - name: LOG_USE_STREAM
                value: "True"
              - name: APP_ENV
                value: prod
              - name: SENTRY_DSN
                value: https://5dddca3ecc964284bb8008bc2beef808@o4505428107853824.ingest.sentry.io/4505428124827648
              - name: ZOOM_API_ENABLED
                value: "True"
              - name: ZOOM_AUTH_CALLBACK
                value: https://appointment.tb.pro/api/v1/zoom/callback
              - name: SERVICE_EMAIL
                value: no-reply@appointment.tb.pro
              - name: AUTH_SCHEME
                value: "fxa"
              - name: JWT_ALGO
                value: "HS256"
              - name: JWT_EXPIRE_IN_MINS
                value: "10000"
              - name: REDIS_URL
                value: cache.appointment.tb.pro
              - name: REDIS_PORT
                value: "6379"
              - name: REDIS_DB
                value: "0"
              - name: REDIS_USE_SSL
                value: "True"
              - name: REDIS_USE_CLUSTER
                value: "True"

  tb:cloudfront:CloudFrontS3Service:
    frontend:
      service_bucket_name: tb-appointment-prod-frontend
      # This cert must be hosted in us-east-1; this limitation is imposed by CloudFront
      certificate_arn: arn:aws:acm:us-east-1:768512802988:certificate/bba8ed51-31ca-4db6-8331-87b6a4be9775
      distribution:
        aliases:
          - appointment.tb.pro
        comment: Appointment prod frontend
        # Do not define ordered cache behaviors here; they are programmatically overridden
        logging_config:
          include_cookies: True

  tb:cloudwatch:CloudWatchMonitoringGroup:
    cloudwatch:
      notify_emails:
        - thunderbird-services-monitoring@thunderbird.net
      config:
        alarms: {}
